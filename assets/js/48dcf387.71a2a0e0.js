(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[501],{17133:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});var s=t(67294),r=t(67179),i=t(93285),a=t(52263);function o(){const{siteConfig:n}=(0,a.Z)();return s.createElement(i.Z,{title:`Hello from ${n.title}`,description:"Description will go into a meta tag in <head />"},s.createElement("main",null,s.createElement(r.Z,{spec:'openapi: 3.0.0\ninfo:\n  title: Core API\n  version: "1.0"\nservers:\n  - description: Default server\n    url: http://localhost:33333/api/\npaths:\n  /plugin/southBound/random:\n    get:\n      summary: Get random properties\n      tags:\n        - "South Bound Plugin"\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                $ref: "#/components/schemas/Random"\n\n  /plugin/southBound:\n    get:\n      summary: Get list of sound bound plugin\n      tags:\n        - "Plugin"\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  anyOf:\n                    - $ref: "#/components/schemas/SouthBoundPlugin"\n  /plugin:\n    get:\n      summary: Get list of plugin\n      tags:\n        - "Plugin"\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  southBound:\n                    type: array\n                    items:\n                      $ref: "#/components/schemas/SouthBoundPlugin"\n                  northBound:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                        protocols:\n                          $ref: "#/components/schemas/DynamicProps"\n  /device/:\n    post:\n      summary: Create new device\n      tags:\n        - "Devices"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: "Device 1"\n                modelName:\n                  type: string\n                  example: "Model 1"\n                manufacturer:\n                  type: string\n                  example: "Back Khoa"\n                type:\n                  type: string\n                  example: "Power Meter"\n                upProtocol:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      example: "Connection 1"\n                    plugin:\n                      type: string\n                      example: "mainflux"\n                downProtocol:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      example: "Modbus connection 1"\n                    plugin:\n                      type: string\n                      example: "modbus-rtu"\n                channels:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                        example: "Channel 1"\n                      readWrite:\n                        type: string\n                        enum: ["R", "W", "RW"]\n                        default: R\n                      offset:\n                        type: number\n                        default: 0\n                      scale:\n                        type: number\n                        default: 1\n      ## TO DO: FIX ME\n      responses:\n        "200":\n          description: "OK"\n\n    delete:\n      summary: Delete device by ID\n      tags:\n        - "Devices"\n      parameters:\n        - in: query\n          name: id\n          description: device id\n          schema:\n            type: number\n            example: 1\n      responses:\n        "200":\n          description: "OK"\n        "400":\n          description: "Some thing wrong"\n    get:\n      summary: get device by id or name\n      tags:\n        - "Devices"\n      parameters:\n        - in: query\n          name: id\n          description: device id\n          schema:\n            type: number\n            example: 1\n        - in: query\n          name: name\n          description: device name\n          schema:\n            type: string\n            example: "Device 1"\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: "#/components/schemas/Device"\n\n  /devices/status:\n    get:\n      summary: Get devices status sumary\n      tags:\n        - "Devices"\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  active:\n                    type: number\n                    example: 0\n                  dormant:\n                    type: number\n                    example: 1\n                  total:\n                    type: number\n                    example: 1\n\n  /devices/:\n    get:\n      summary: Query all devices\n      tags:\n        - "Devices"\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  limit:\n                    type: number\n                    example: 10\n                  start:\n                    type: number\n                    example: 0\n                  total:\n                    type: number\n                    example: 100\n                  devices:\n                    type: array\n                    items:\n                      $ref: "#/components/schemas/Device"\n\n  /auth/:\n    get:\n      summary: Check if user is logged in or not\n      tags:\n        - "Auth"\n      responses:\n        "200":\n          description: User logged in\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: number\n                    example: 1\n                  username:\n                    type: string\n                    example: "admin"\n                  role:\n                    type: string\n                    example: "admin"\n        "400":\n          description: User not logged in\n    post:\n      summary: Login or get access token\n      tags:\n        - "Auth"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: admin\n                password:\n                  type: string\n                  example: admin\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  accessToken:\n                    type: string\n                    example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjY5NTM1MzY0fQ.Bj5LwN-vAozJmz-AIyoe4Ok-ENvj4iSaLtU43VwAslHi2diTP0zjVmNGSoULMQSw82hav6199UtapV_iMnp9tOsJYvoCfAeedryQErSkBGOiY6Lr-WGHQbUvcOn_evKXWWtqZCI0LZShrVM0XyS8gxP5l167T4w-g0qpNChIcvA"\n        "404":\n          description: Incorrect username or password\n  /auth/mqtt:\n    post:\n      summary: Auth API for mqtt broker\n      tags:\n        - "Auth"\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: "admin"\n                passsword:\n                  type: string\n                  example: "admin"\n                clientid:\n                  description: JWT or default mqtt client id\n                  type: string\n                  example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjY5NTM1MzY0fQ.Bj5LwN-vAozJmz-AIyoe4Ok-ENvj4iSaLtU43VwAslHi2diTP0zjVmNGSoULMQSw82hav6199UtapV_iMnp9tOsJYvoCfAeedryQErSkBGOiY6Lr-WGHQbUvcOn_evKXWWtqZCI0LZShrVM0XyS8gxP5l167T4w-g0qpNChIcvA"\n      responses:\n        "200":\n          description: "OK"\n        "400":\n          description: "Invalid username password or clientid"\n  /user:\n    get:\n      summary: Get User by ID or name\n\n      tags:\n        - Users\n      parameters:\n        - in: query\n          name: id\n          description: user id\n          schema:\n            type: number\n            example: 1\n        - in: query\n          name: username\n          description: user name\n          schema:\n            type: string\n            example: "root"\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                $ref: "#/components/schemas/UserDetail"\n        "401":\n          description: Unauthorized\n\n    delete:\n      summary: Delete user (soft delete ofcourse)\n      tags:\n        - "Users"\n      parameters:\n        - in: query\n          name: id\n          description: user id\n          schema:\n            type: number\n            example: 1\n        - in: query\n          name: username\n          description: user name\n          schema:\n            type: string\n            example: "root"\n      responses:\n        "200":\n          description: User deleted\n        "400":\n          description: Bad request\n        "401":\n          description: Unauthorized\n    post:\n      summary: Create new user\n      tags:\n        - "Users"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: "#/components/schemas/User"\n      responses:\n        "202":\n          description: Created\n        "400":\n          description: Something wrong\n        "401":\n          description: Unauthorized\n    put:\n      summary: Change passsword only\n      tags:\n        - "Users"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                oldPassword:\n                  type: string\n                  example: admin\n                newPassword:\n                  type: string\n                  example: newAdmin\n      responses:\n        "202":\n          description: Success\n        "400":\n          description: Bad password\n        "401":\n          description: Unauthorized\n  /users:\n    get:\n      summary: Get list of users.\n      tags:\n        - Users\n      parameters:\n        - in: query\n          name: id\n          description: user id\n          schema:\n            type: number\n        - in: query\n          name: username\n          description: username\n          schema:\n            type: string\n            example: root\n        - in: query\n          name: role\n          description: user role\n          schema:\n            type: string\n            enum: ["admin"]\n            default: "admin"\n        - in: query\n          name: limit\n          description: Number of query user\n          schema:\n            type: number\n            default: 10\n        - in: query\n          name: start\n          description: Starting row offset\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: order\n          description: asc or desc\n          schema:\n            type: string\n            enum: [asc, desc]\n            default: desc\n        - in: query\n          name: orderBy\n          description: Order by value\n          schema:\n            type: string\n            enum: ["username", "role", "createdAt"]\n            default: "username"\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: number\n                    description: Total user match\n                    example: 10\n                  limit:\n                    type: number\n                    description: Number of query user\n                  start:\n                    type: number\n                    description: Starting row offset\n                  users:\n                    type: array\n                    items:\n                      $ref: "#/components/schemas/UserDetail"\n        "400":\n          description: Error\n        "401":\n          description: Unauthorized\n\n  /logger:\n    get:\n      summary: Tracing logs\n      tags:\n        - Logger\n      operationId: traceLog\n      description: Query old log\n      parameters:\n        - in: query\n          name: from\n          description: Start time for the search\n          schema:\n            type: string\n            format: date-time\n            example: "1970-01-01T00:00:00.000Z"\n        - in: query\n          name: until\n          description: End time for the search\n          schema:\n            type: string\n            format: date-time\n            example: "2022-11-30T07:31:28.380Z"\n        - in: query\n          name: limit\n          description: Number of query message\n          schema:\n            type: integer\n            default: 10\n        - in: query\n          name: start\n          description: Starting row offset\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: order\n          description: asc or desc\n          schema:\n            type: string\n            enum: [asc, desc]\n            default: desc\n\n      responses:\n        "200":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: "#/components/schemas/Logs"\n        "400":\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errors:\n                    type: array\n                    items:\n                      type: string\n                      example: "query[parameters]:Invalid value"\n        "401":\n          description: Unauthorized\n  /healthcheck:\n    get:\n      summary: Get system info\n      tags:\n        - Health Check\n      operationId: healthCheck\n      description: Get system info\n      responses:\n        "200":\n          description: "OK"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ip:\n                    type: string\n                    format: ipv4\n                    example: "192.168.1.1"\n                  hostname:\n                    type: string\n                    example: "DESKTOP-TI5UK3V"\n                  platform:\n                    type: string\n                    example: "linux"\n                  os:\n                    type: string\n                    example: "Ubuntu 22.04"\n                  type:\n                    type: string\n                    example: "Linux"\n                  arch:\n                    type: string\n                    example: "x64"\n                  cpuCount:\n                    type: number\n                    example: 8\n                  cpuModel:\n                    type: string\n                    example: "Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz"\n        "401":\n          description: Unauthorized\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |\n        * Users access: "Authorization: Bearer <user_token>"\n  schemas:\n    Logs:\n      type: array\n      items:\n        type: object\n        properties:\n          rows:\n            type: array\n            items:\n              type: object\n              properties:\n                level:\n                  type: string\n                  enum: ["info", "warn", "error"]\n                message:\n                  type: string\n                  example: "Hello World"\n                timestamp:\n                  type: string\n                  format: date-time\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n          example: admin\n        role:\n          type: string\n          example: admin\n    UserDetail:\n      type: object\n      properties:\n        username:\n          type: string\n          example: root\n        role:\n          type: string\n          enum: ["admin"]\n          example: "admin"\n        createdAt:\n          type: string\n          format: date-time\n\n    DynamicProps:\n      additionalProperties:\n        type: object\n        properties:\n          type:\n            type: string\n            enum:\n              [\n                "INTEGER",\n                "STRING",\n                "BOOLEAN",\n                "REAL",\n                "DECIMAL",\n                "DATES",\n                "BLOBS",\n                "ENUM",\n              ]\n          defaultValue:\n            type: string\n          values:\n            type: array\n          unique:\n            type: string\n          allowNull:\n            type: boolean\n          label:\n            type: string\n          placeholder:\n            type: string\n\n    SouthBoundPlugin:\n      type: object\n      properties:\n        name:\n          type: string\n          example: "random"\n        channels:\n          $ref: "#/components/schemas/DynamicProps"\n        protocols:\n          $ref: "#/components/schemas/DynamicProps"\n\n    Random:\n      type: object\n      properties:\n        name:\n          type: string\n          default: "random"\n        channels:\n          type: object\n          properties:\n            max:\n              type: string\n              default: "REAL"\n            min:\n              type: string\n              default: "REAL"\n        protocols:\n          type: object\n          properties:\n            seed:\n              type: string\n              default: "REAL"\n    Device:\n      type: object\n      properties:\n        id:\n          type: number\n          example: 1\n        name:\n          type: string\n          example: "Device 1"\n        modelName:\n          type: string\n          example: "Model 1"\n        manufacturer:\n          type: string\n          example: "Back Khoa"\n        type:\n          type: string\n          example: "Power Meter"\n        status:\n          type: string\n          enum: ["dormant", "active"]\n        createdAt:\n          type: string\n          format: "date-time"\n        updateAt:\n          type: string\n          format: "date-time"\n        upProtocol:\n          type: object\n        downProtocol:\n          type: object\n\nsecurity:\n  - bearerAuth: []\n',docExpansion:"full"})))}},24654:()=>{}}]);