openapi: 3.0.0
info:
  title: Core API
  version: "1.0"
servers:
  - description: Default server
    url: http://localhost:33333/api/
paths:
  /plugin/southBound/random:
    get:
      summary: Get random properties
      tags:
        - "South Bound Plugin"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Random"

  /plugin/southBound:
    get:
      summary: Get list of sound bound plugin
      tags:
        - "Plugin"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: "#/components/schemas/SouthBoundPlugin"
  /plugin:
    get:
      summary: Get list of plugin
      tags:
        - "Plugin"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  southBound:
                    type: array
                    items:
                      $ref: "#/components/schemas/SouthBoundPlugin"
                  northBound:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        protocols:
                          $ref: "#/components/schemas/DynamicProps"
  /device/:
    post:
      summary: Create new device
      tags:
        - "Devices"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Device 1"
                modelName:
                  type: string
                  example: "Model 1"
                manufacturer:
                  type: string
                  example: "Back Khoa"
                type:
                  type: string
                  example: "Power Meter"
                upProtocol:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Connection 1"
                    plugin:
                      type: string
                      example: "mainflux"
                downProtocol:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Modbus connection 1"
                    plugin:
                      type: string
                      example: "modbus-rtu"
                channels:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Channel 1"
                      readWrite:
                        type: string
                        enum: ["R", "W", "RW"]
                        default: R
                      offset:
                        type: number
                        default: 0
                      scale:
                        type: number
                        default: 1
      ## TO DO: FIX ME
      responses:
        "200":
          description: "OK"

    delete:
      summary: Delete device by ID
      tags:
        - "Devices"
      parameters:
        - in: query
          name: id
          description: device id
          schema:
            type: number
            example: 1
      responses:
        "200":
          description: "OK"
        "400":
          description: "Some thing wrong"
    get:
      summary: get device by id or name
      tags:
        - "Devices"
      parameters:
        - in: query
          name: id
          description: device id
          schema:
            type: number
            example: 1
        - in: query
          name: name
          description: device name
          schema:
            type: string
            example: "Device 1"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"

  /devices/status:
    get:
      summary: Get devices status sumary
      tags:
        - "Devices"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: number
                    example: 0
                  dormant:
                    type: number
                    example: 1
                  total:
                    type: number
                    example: 1

  /devices/:
    get:
      summary: Query all devices
      tags:
        - "Devices"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: number
                    example: 10
                  start:
                    type: number
                    example: 0
                  total:
                    type: number
                    example: 100
                  devices:
                    type: array
                    items:
                      $ref: "#/components/schemas/Device"

  /auth/:
    get:
      summary: Check if user is logged in or not
      tags:
        - "Auth"
      responses:
        "200":
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  username:
                    type: string
                    example: "admin"
                  role:
                    type: string
                    example: "admin"
        "400":
          description: User not logged in
    post:
      summary: Login or get access token
      tags:
        - "Auth"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjY5NTM1MzY0fQ.Bj5LwN-vAozJmz-AIyoe4Ok-ENvj4iSaLtU43VwAslHi2diTP0zjVmNGSoULMQSw82hav6199UtapV_iMnp9tOsJYvoCfAeedryQErSkBGOiY6Lr-WGHQbUvcOn_evKXWWtqZCI0LZShrVM0XyS8gxP5l167T4w-g0qpNChIcvA"
        "404":
          description: Incorrect username or password
  /auth/mqtt:
    post:
      summary: Auth API for mqtt broker
      tags:
        - "Auth"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "admin"
                passsword:
                  type: string
                  example: "admin"
                clientid:
                  description: JWT or default mqtt client id
                  type: string
                  example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjY5NTM1MzY0fQ.Bj5LwN-vAozJmz-AIyoe4Ok-ENvj4iSaLtU43VwAslHi2diTP0zjVmNGSoULMQSw82hav6199UtapV_iMnp9tOsJYvoCfAeedryQErSkBGOiY6Lr-WGHQbUvcOn_evKXWWtqZCI0LZShrVM0XyS8gxP5l167T4w-g0qpNChIcvA"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid username password or clientid"
  /user:
    get:
      summary: Get User by ID or name

      tags:
        - Users
      parameters:
        - in: query
          name: id
          description: user id
          schema:
            type: number
            example: 1
        - in: query
          name: username
          description: user name
          schema:
            type: string
            example: "root"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        "401":
          description: Unauthorized

    delete:
      summary: Delete user (soft delete ofcourse)
      tags:
        - "Users"
      parameters:
        - in: query
          name: id
          description: user id
          schema:
            type: number
            example: 1
        - in: query
          name: username
          description: user name
          schema:
            type: string
            example: "root"
      responses:
        "200":
          description: User deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
    post:
      summary: Create new user
      tags:
        - "Users"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "202":
          description: Created
        "400":
          description: Something wrong
        "401":
          description: Unauthorized
    put:
      summary: Change passsword only
      tags:
        - "Users"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: admin
                newPassword:
                  type: string
                  example: newAdmin
      responses:
        "202":
          description: Success
        "400":
          description: Bad password
        "401":
          description: Unauthorized
  /users:
    get:
      summary: Get list of users.
      tags:
        - Users
      parameters:
        - in: query
          name: id
          description: user id
          schema:
            type: number
        - in: query
          name: username
          description: username
          schema:
            type: string
            example: root
        - in: query
          name: role
          description: user role
          schema:
            type: string
            enum: ["admin"]
            default: "admin"
        - in: query
          name: limit
          description: Number of query user
          schema:
            type: number
            default: 10
        - in: query
          name: start
          description: Starting row offset
          schema:
            type: integer
            default: 0
        - in: query
          name: order
          description: asc or desc
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - in: query
          name: orderBy
          description: Order by value
          schema:
            type: string
            enum: ["username", "role", "createdAt"]
            default: "username"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                    description: Total user match
                    example: 10
                  limit:
                    type: number
                    description: Number of query user
                  start:
                    type: number
                    description: Starting row offset
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserDetail"
        "400":
          description: Error
        "401":
          description: Unauthorized

  /logger:
    get:
      summary: Tracing logs
      tags:
        - Logger
      operationId: traceLog
      description: Query old log
      parameters:
        - in: query
          name: from
          description: Start time for the search
          schema:
            type: string
            format: date-time
            example: "1970-01-01T00:00:00.000Z"
        - in: query
          name: until
          description: End time for the search
          schema:
            type: string
            format: date-time
            example: "2022-11-30T07:31:28.380Z"
        - in: query
          name: limit
          description: Number of query message
          schema:
            type: integer
            default: 10
        - in: query
          name: start
          description: Starting row offset
          schema:
            type: integer
            default: 0
        - in: query
          name: order
          description: asc or desc
          schema:
            type: string
            enum: [asc, desc]
            default: desc

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "400":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "query[parameters]:Invalid value"
        "401":
          description: Unauthorized
  /healthcheck:
    get:
      summary: Get system info
      tags:
        - Health Check
      operationId: healthCheck
      description: Get system info
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ip:
                    type: string
                    format: ipv4
                    example: "192.168.1.1"
                  hostname:
                    type: string
                    example: "DESKTOP-TI5UK3V"
                  platform:
                    type: string
                    example: "linux"
                  os:
                    type: string
                    example: "Ubuntu 22.04"
                  type:
                    type: string
                    example: "Linux"
                  arch:
                    type: string
                    example: "x64"
                  cpuCount:
                    type: number
                    example: 8
                  cpuModel:
                    type: string
                    example: "Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz"
        "401":
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        * Users access: "Authorization: Bearer <user_token>"
  schemas:
    Logs:
      type: array
      items:
        type: object
        properties:
          rows:
            type: array
            items:
              type: object
              properties:
                level:
                  type: string
                  enum: ["info", "warn", "error"]
                message:
                  type: string
                  example: "Hello World"
                timestamp:
                  type: string
                  format: date-time
    User:
      type: object
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: admin
        role:
          type: string
          example: admin
    UserDetail:
      type: object
      properties:
        username:
          type: string
          example: root
        role:
          type: string
          enum: ["admin"]
          example: "admin"
        createdAt:
          type: string
          format: date-time

    DynamicProps:
      additionalProperties:
        type: object
        properties:
          type:
            type: string
            enum:
              [
                "INTEGER",
                "STRING",
                "BOOLEAN",
                "REAL",
                "DECIMAL",
                "DATES",
                "BLOBS",
                "ENUM",
              ]
          defaultValue:
            type: string
          values:
            type: array
          unique:
            type: string
          allowNull:
            type: boolean
          label:
            type: string
          placeholder:
            type: string

    SouthBoundPlugin:
      type: object
      properties:
        name:
          type: string
          example: "random"
        channels:
          $ref: "#/components/schemas/DynamicProps"
        protocols:
          $ref: "#/components/schemas/DynamicProps"

    Random:
      type: object
      properties:
        name:
          type: string
          default: "random"
        channels:
          type: object
          properties:
            max:
              type: string
              default: "REAL"
            min:
              type: string
              default: "REAL"
        protocols:
          type: object
          properties:
            seed:
              type: string
              default: "REAL"
    Device:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "Device 1"
        modelName:
          type: string
          example: "Model 1"
        manufacturer:
          type: string
          example: "Back Khoa"
        type:
          type: string
          example: "Power Meter"
        status:
          type: string
          enum: ["dormant", "active"]
        createdAt:
          type: string
          format: "date-time"
        updateAt:
          type: string
          format: "date-time"
        upProtocol:
          type: object
        downProtocol:
          type: object

security:
  - bearerAuth: []
